name: CI

on:
  push:
    branches:
      - master
      - release-*
  pull_request: {}
  workflow_dispatch: {}

env:
  # Common versions
  GO_VERSION: '1.18'
  GOLANGCI_VERSION: 'v1.48.0'
  DOCKER_BUILDX_VERSION: 'v0.4.2'

  # Common users. We can't run a step 'if secrets.AWS_USR != ""' but we can run
  # a step 'if env.AWS_USR' != ""', so we copy these to succinctly test whether
  # credentials have been provided before trying to run steps that need them.
  DOCKER_USR: ${{ secrets.DOCKER_USR }}
  AWS_USR: ${{ secrets.AWS_USR }}

jobs:

  golangci-lint:
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Lint golang code
        uses: golangci/golangci-lint-action@v2
        with:
          version: ${{ env.GOLANGCI_VERSION }}
          args: --disable-all  -E deadcode -E gofmt -E goimports -E ineffassign -E misspell -E vet --timeout=15m -v

  markdownlint-misspell-shellcheck:
    runs-on: ubuntu-18.04
    # this image is build from Dockerfile
    # https://github.com/pouchcontainer/pouchlinter/blob/master/Dockerfile
    container: pouchcontainer/pouchlinter:v0.1.2
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Run misspell
        run: find  ./* -name  "*"  | xargs misspell -error
      - name: Lint markdown files
        run: find  ./ -name  "*.md" | grep -v enhancements |  grep -v .github |  xargs mdl -r ~MD010,~MD013,~MD022,~MD024,~MD029,~MD031,~MD032,~MD033,~MD034,~MD036
#      - name: Check markdown links
#        run: |
#          set +e
#          for name in $(find . -name \*.md | grep -v CHANGELOG); do
#            if [ -f $name ]; then
#              markdown-link-check -q $name -c .github/workflows/markdown-link-check.config.json;
#              if [ $? -ne 0 ]; then
#                code=1
#              fi
#            fi
#          done
#          bash -c "exit $code";
  unit-tests:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Fetch History
        run: git fetch --prune --unshallow
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Cache Go Dependencies
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-
      - name: Run Unit Tests
        run: make test
      - name: Publish Unit Test Coverage
        uses: codecov/codecov-action@v3
        with:
          name: codecov-umbrella
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: unittests
          files: ./cover.out
          fail_ci_if_error: true
          verbose: true

  build-images:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Fetch History
        run: git fetch --prune --unshallow
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Cache Go Dependencies
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-
      - name: Build All Images
        run: ARCH=amd64 make build
